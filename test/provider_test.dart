import 'package:flutter_test/flutter_test.dart';
import 'package:frontend/data/remote/api_service.dart';
import 'package:frontend/models/product.dart';
import 'package:frontend/providers/product_provider.dart';
import 'package:mockito/mockito.dart';
import 'package:mockito/annotations.dart';

// This file is generated by running `flutter pub run build_runner build`.
// It will not exist until that command is run.
import 'provider_test.mocks.dart';

@GenerateMocks([ApiService])
void main() {
  late ProductProvider productProvider;
  late MockApiService mockApiService;

  setUp(() {
    mockApiService = MockApiService();
    productProvider = ProductProvider(apiService: mockApiService);
  });

  group('ProductProvider', () {
    test('fetchProducts updates products list on success', () async {
      final products = [
        Product(id: 1, name: 'Test Product 1'),
        Product(id: 2, name: 'Test Product 2'),
      ];

      // Arrange
      when(mockApiService.getProducts()).thenAnswer((_) async => products);

      // Act
      await productProvider.fetchProducts();

      // Assert
      expect(productProvider.products, products);
      expect(productProvider.isLoading, false);
    });

    test('fetchProducts handles exceptions gracefully', () async {
      // Arrange
      when(mockApiService.getProducts()).thenThrow(Exception('Failed to load'));

      // Act
      await productProvider.fetchProducts();

      // Assert
      expect(productProvider.products, isEmpty);
      expect(productProvider.isLoading, false);
    });
  });
}
